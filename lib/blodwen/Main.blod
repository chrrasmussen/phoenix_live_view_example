import ErlangPrelude
import PhoenixLiveView


%erl_export "render" 1
render : ErlMap -> IO ErlTerm
render assigns =
  pure $ renderTemplate "Elixir.DemoWeb.BlodwenCounterView" "index.html" assigns


%erl_export "mount" 2
mount : ErlMap -> Socket -> IO (ErlTuple2 ErlAtom Socket)
mount session socket =
  let newSocket = assign (MkErlAtom "val") (the Int 0) socket
  in pure $ MkErlTuple2 (MkErlAtom "ok") newSocket


%erl_export "handle_event" 3
handleEvent : String -> ErlTerm -> Socket -> IO (ErlTuple2 ErlAtom Socket)

handleEvent "inc" unsignedParams socket =
  let newSocket = update (MkErlAtom "val") (\x => erlUnsafeCast Int x + 1) socket
  in pure $ MkErlTuple2 (MkErlAtom "noreply") newSocket

handleEvent "dec" unsignedParams socket =
  let newSocket = update (MkErlAtom "val") (\x => erlUnsafeCast Int x - 1) socket
  in pure $ MkErlTuple2 (MkErlAtom "noreply") newSocket


main : IO ()
main = do
  -- NOTE: Workaround to be able to export "unused" functions
  let _ = render
  let _ = mount
  let _ = handleEvent
  pure ()

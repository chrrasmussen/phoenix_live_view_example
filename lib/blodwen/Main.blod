import ErlangPrelude
import PhoenixLiveView


%erl_export "render" 1
render : ErlTerm -> IO ErlTerm
render assigns =
  pure $ renderTemplate "Elixir.DemoWeb.BlodwenCounterView" "index.html" assigns


%erl_export "mount" 1
mount : ErlTerm -> IO (ErlTuple2 ErlAtom ErlTerm)
mount socket =
  let newSocket = assign (MkErlAtom "val") (the Int 0) socket
  in pure $ MkErlTuple2 (MkErlAtom "ok") newSocket


%erl_export "handle_event" 2
handleEvent : String -> ErlTerm -> IO (ErlTuple2 ErlAtom ErlTerm)

handleEvent "inc" socket =
  let newSocket = update (MkErlAtom "val") (+ 1) socket
  in pure $ MkErlTuple2 (MkErlAtom "noreply") newSocket

handleEvent "dec" socket =
  let newSocket = update (MkErlAtom "val") (\x => x - 1) socket
  in pure $ MkErlTuple2 (MkErlAtom "noreply") newSocket


main : IO ()
main = do
  -- NOTE: Workaround to be able to export "unused" functions
  let _ = render
  let _ = mount
  let _ = handleEvent
  pure ()

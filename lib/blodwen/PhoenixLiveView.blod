module PhoenixLiveView

import ErlangPrelude


export
renderTemplate : String -> String -> ErlMap -> ErlTerm
renderTemplate viewModule templateName assigns = unsafePerformIO $
  erlCall viewModule "render" [templateName, assigns]


export
assign : (ErlType key, ErlType value) => key -> value -> ErlTerm -> ErlTerm
assign key value socket = unsafePerformIO $
  erlCall "Elixir.Phoenix.LiveView" "assign" [socket, key, value]


export
update : (ErlType key, ErlType value) => key -> (ErlTerm -> value) -> ErlTerm -> ErlTerm
update key func socket = unsafePerformIO $
  erlCall "Elixir.Phoenix.LiveView" "update" [socket, key, func]
